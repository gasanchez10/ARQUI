//##########################################################################
//######					G0B1T HDL EXAMPLES											####
//######	Fredy Enrique Segura-Quijano fsegura@uniandes.edu.co				####   
//######																						####   
//######				MODIFICADO: Agosto de 2016 - FES								####   
//##########################################################################
//# G0B1T
//# Copyright (C) 2014 Bogotá, Colombia
//# 
//# This program is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, version 3 of the License.
//#
//# This program is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with this program.  If not, see <http://www.gnu.org/licenses/>.
//#/
//###########################################################################

//=======================================================
//  MODULE Definition
//=======================================================
module ALU #(parameter DATAWIDTH_BUS=8, parameter DATAWIDTH_ALU_SELECTION=4)(
	//////////// INPUTS //////////
	ALU_DataBUSA_In,
	ALU_DataBUSB_In,
	ALU_Selection_In,
	//////////// OUTPUTS //////////
	ALU_Overflow_OutLow,
	ALU_Carry_OutLow,
	ALU_Negative_OutLow,
	ALU_Zero_OutLow,
	ALU_DataBUS_Out
);
//=======================================================
//  PARAMETER declarations
//=======================================================

//=======================================================
//  PORT declarations
//=======================================================
	input			[DATAWIDTH_BUS-1:0] ALU_DataBUSA_In;
	input			[DATAWIDTH_BUS-1:0] ALU_DataBUSB_In;
	input			[DATAWIDTH_ALU_SELECTION-1:0] ALU_Selection_In;
	output 			ALU_Overflow_OutLow;
	output 			ALU_Carry_OutLow;
	output 			ALU_Negative_OutLow;
	output 			ALU_Zero_OutLow;
	output reg		[DATAWIDTH_BUS-1:0] ALU_DataBUS_Out;

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire caover,cout;
wire [DATAWIDTH_BUS-2:0] addition0; // Variable usada para la operación suma y para determinar las flags
wire addition1;		// Variable usada para la operación suma y para determinar las flags
//=======================================================
//  Structural coding
//=======================================================
//INPUT LOGIC: COMBINATIONAL
	always@(*)
	begin
	case (ALU_Selection_In)	
		4'b0000:  ALU_DataBUS_Out = ALU_DataBUSA_In; 					//BUSA
		4'b0001:  ALU_DataBUS_Out = ALU_DataBUSA_In | ALU_DataBUSB_In;	//OR
		4'b0010:  ALU_DataBUS_Out = ALU_DataBUSA_In & ALU_DataBUSB_In;	//AND
		4'b0011:  ALU_DataBUS_Out = ~ALU_DataBUSA_In;					//NOT
		4'b0100:  ALU_DataBUS_Out = ALU_DataBUSA_In ^ ALU_DataBUSB_In;	//XOR
		4'b0101:  ALU_DataBUS_Out = ALU_DataBUSA_In;					//BUSA Can be other function
		4'b0110:  ALU_DataBUS_Out = ALU_DataBUSA_In;					//BUSA Can be other function
		4'b0111:  ALU_DataBUS_Out = ALU_DataBUSA_In;					//BUSA Can be other function

		4'b1000:  ALU_DataBUS_Out = ALU_DataBUSA_In + ALU_DataBUSB_In;	//ADD
		4'b1001:  ALU_DataBUS_Out = ALU_DataBUSA_In - ALU_DataBUSB_In;	//SUB
		4'b1010:  ALU_DataBUS_Out = ALU_DataBUSA_In + 1'b1;				//INCREMENT A
		4'b1011:  ALU_DataBUS_Out = ALU_DataBUSA_In - 1'b1;				//DECREMENT A
		4'b1100:  ALU_DataBUS_Out = ALU_DataBUSA_In;					//BUSA Can be other function
		4'b1101:  ALU_DataBUS_Out = ALU_DataBUSA_In;					//BUSA Can be other function
		4'b1110:  ALU_DataBUS_Out = ALU_DataBUSA_In;					//BUSA Can be other function
		4'b1111:  ALU_DataBUS_Out = ALU_DataBUSA_In;					//BUSA DO NOTHING!!!!!!!!		
		
		default :  ALU_DataBUS_Out = ALU_DataBUSA_In; // channel 0 is selected
	endcase
	end

//=======================================================
//  Outputs
//=======================================================

/*Flags*/
assign {caover,addition0[DATAWIDTH_BUS-2:0]}=ALU_DataBUSA_In[DATAWIDTH_BUS-2:0]+ALU_DataBUSB_In[DATAWIDTH_BUS-2:0]; 	// Determinación de carry del bit número 7
assign {cout,addition1}= ALU_DataBUSA_In[DATAWIDTH_BUS-1] + ALU_DataBUSB_In[DATAWIDTH_BUS-1] + caover;	// Determinación de la flag Carry y la suma de busA y busB

assign ALU_Zero_OutLow=(ALU_DataBUS_Out==8'b00000000) ? 1'b0 : 1'b1;	// Determinación de la flag Zero
assign ALU_Carry_OutLow = ~cout;
assign ALU_Overflow_OutLow = ~ (caover ^ cout);		// Determinación de la flag Ov a partir de la flag Carry y el carry del bit 7
assign ALU_Negative_OutLow = ~ (ALU_DataBUS_Out[DATAWIDTH_BUS-1]);	



endmodule


